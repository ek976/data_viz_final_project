---
title: "Plot 4: Parallel Plot"
author: "Sheeba"
format:
  html:
    embed-resources: true
    code-fold: true
    include-in-header:
      - text: |
            <script src="https://d3js.org/d3.v7.min.js"></script>
---


```{ojs}
// Import the necessary libraries
d3 = require("d3", "d3-svg-legend")

// Define and load your datasets
dat = d3.csv('parallel_coordinates_df.csv', function(d){
  return {
    'Country': d['Country'], 
    'Region': d['Region'], 
    'Female enrolment ratio': +d['Female enrolment ratio'],
    'GDP per capita (USD)': +d['GDP per capita (USD)'],
    'GNI per capita (USD)': +d['GNI per capita (USD)'],
    'Income group': d['Income group']
  };
});

dat;

```



```{ojs}
import { slider } from "@jashkenas/inputs"
import { vl } from "@vega/vega-lite-api"
```

```{ojs}

viewof numTicks = slider({
  min: 0,
  max: 1,
  value: 2,
  step: 1,
  title: "Number of vertical ticks"
})

```


```{ojs}

chart = {
  const height = 350;
  const labelMap = {
    gdp_per_capita: "GDP per Capita",
    gni_per_capita: "GNI per Capita",
    enrolment_ratio_female: "Female Enrolment Ratio",
    income_group: "Income Group",
  };
  
  const hover = vl
    .selectSingle()
    .on("mouseover")
    .nearest(true)
    .empty("none");

  const base = vl.markRule({ color: "#ccc" }).encode(
  vl.x().fieldN("key").sort(['GDP per capita (USD)', 'Female enrolment ratio', 'GNI per capita (USD)']).title(d => labelMap[d] || d),  // Explicitly sort by desired order
  vl.detail().count()
);

const line = base.markLine().encode(
  vl.color().fieldN("Income group").scale({
    domain: ['Low income', 'Lower middle income', 'Upper middle income', 'High income'],  // Adjust these categories based on your actual data
    range: ['#ff4500', '#ffa205', '#d40637', '#5f0922']
  }),
  vl.detail().fieldN("index"),
  vl.opacity().if(hover, vl.value(1)).value(0.3),
  vl.y().fieldQ("norm_val").axis(null),
  vl.tooltip([
    'Country',
    'Region',
    'Female enrolment ratio', 
    'GDP per capita (USD)', 
    'GNI per capita (USD)', 
    'Income group'
  ])
);
  const points = line.markCircle()
    .select(hover)
    .encode(vl.size().if(hover, vl.value(50)).value(5));

  // Generates a spec to show tick values at an specific value of y0
  const tick = y0 =>
    vl.layer(
        base.markText({ style: "label" }).encode(vl.text().max("max")),
        base.markTick({ style: "tick", size: 8, color: "#ccc" })
      )
      .encode(vl.y().value(y0));

  // Create an array with *numTicks* ticks
  const ticks = Array.from({ length: numTicks })
    .map((_, i) => tick((height / (numTicks - 1)) * i));

return vl
    .layer(base, line, points, ...ticks)
    .data(dat)
    .transform(
      vl.filter(attribs.map(a => `datum["${a}"] != null`).join(" && ")),
      vl.window(vl.count().as("index")),
      vl.fold(attribs),
      vl.groupby("key").joinaggregate(vl.min("value").as("min"), vl.max("value").as("max")),
      vl.calculate("(datum.value - datum.min) / (datum.max - datum.min)").as("norm_val"),
      vl.calculate("(datum.min + datum.max) / 2").as("mid")
    )
    .config({
      axisX: { domain: false, labelAngle: 0, tickColor: "#ccc", title: null },
      view: { stroke: null },
      style: {
        label: { baseline: "middle", align: "right", dx: -5 },
        tick: { orient: "horizontal" }
      }
    })
    .width(width - 100)
    .height(height)
    .title({
      text: 'Economic and Educational Indicators by Income Group',
      fontSize: 12,
      fontWeight: 'normal',
      anchor: 'middle',
      color: 'black',
      font: 'monospace',
      offset: 40
    })
    .render();


}


```


```{ojs}
attribs = Object.keys(dat[0]).filter(a => !isNaN(dat[0][a])) //Find the attributes that are numbers
```