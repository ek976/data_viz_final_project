---
title: "Plot 5: Government GDP"
author: "Tiana Le"
format:
  html:
    embed-resources: true
    code-fold: true
    include-in-header:
      - text: |
            <script src="https://d3js.org/d3.v7.min.js"></script>
---

```{ojs}
d7 = require('d3@7') 
primaryData = d7.csv('primary_updated.csv', function(d){
  return {
    country_name: d.country_name,
    year1: +d.year1,
    year2: +d.year2,
  }
})
primaryData

```

```{ojs}

secondaryData = d7.csv('secondary_updated.csv', function(d){
  return {
    country_name: d.country_name,
    year1: +d.year1,
    year2: +d.year2,
  }
})
secondaryData
```

```{ojs}

tertiaryData = d7.csv('tertiary_updated.csv', function(d){
  return {
    country_name: d.country_name,
    year1: +d.year1,
    year2: +d.year2,
  }
})
tertiaryData
```

```{ojs}

viewof metric = Inputs.radio(new Map([["Absolute", "absolute"], ["Relative", "relative"]]), {value: "absolute", label: "Change"})

```

```{ojs}


viewof selectedDataset = Inputs.select(['Primary', 'Secondary', 'Tertiary'], {label: 'Select Dataset', value: 'Primary'})

width = 800; // Define a default width for your visualization

chart = async () => {
  const selected = await selectedDataset;
  let data;
  if (selected === 'Primary') {
    data = await primaryData;
  } else if (selected === 'Secondary') {
    data = await secondaryData;
  } else if (selected === 'Tertiary') {
    data = await tertiaryData;
  }
  
  data = data.map(d => ({
    country_name: d.country_name,
    value: metric === 'absolute' ? d.year2 - d.year1 : (d.year2 - d.year1) / d.year1
  }));

  const barHeight = 25;
  const marginTop = 35;
  const marginRight = 70;
  const marginBottom = 10;
  const marginLeft = 120;
  const height = Math.ceil((data.length + 0.1) * barHeight) + marginTop + marginBottom;

  const x = d3.scaleLinear()
    .domain(d3.extent(data, d => d.value))
    .rangeRound([marginLeft, width - marginRight]);

  const y = d3.scaleBand()
    .domain(data.map(d => d.country_name))
    .rangeRound([marginTop, height - marginBottom])
    .padding(0.1);

  const format = d3.format(metric === 'absolute' ? '+,d' : '+.1%');
  const tickFormat = metric === 'absolute' ? d3.formatPrefix('+.1', 1e6) : d3.format('+.0%');

  const svg = d3.create('svg')
    .attr('viewBox', [0, 0, width, height])
    .attr('style', 'max-width: 100%; height: auto; font: 10px sans-serif;');

  svg.append('g')
    .selectAll()
    .data(data)
    .join('rect')
    .attr('fill', d => d3.schemeRdBu[3][d.value > 0 ? 2 : 0])
    .attr('x', d => x(Math.min(d.value, 0)))
    .attr('y', d => y(d.country_name))
    .attr('width', d => Math.abs(x(d.value) - x(0)))
    .attr('height', y.bandwidth());

  svg.append('g')
    .attr('font-family', 'sans-serif')
    .attr('font-size', 10)
    .selectAll()
    .data(data)
    .join('text')
    .attr('text-anchor', d => d.value < 0 ? 'end' : 'start')
    .attr('x', d => x(d.value) + Math.sign(d.value - 0) * 4)
    .attr('y', d => y(d.country_name) + y.bandwidth() / 2)
    .attr('dy', '0.35em')
    .text(d => format(d.value));

  svg.append('g')
    .attr('transform', `translate(0,${marginTop})`)
    .call(d3.axisTop(x).ticks(width / 80).tickFormat(tickFormat))
    .call(g => g.selectAll('.tick line').clone()
      .attr('y2', height - marginTop - marginBottom)
      .attr('stroke-opacity', 0.1))
    .call(g => g.select('.domain').remove());

  svg.append('g')
    .attr('transform', `translate(${x(0)},0)`)
    .call(d3.axisLeft(y).tickSize(0).tickPadding(6))
    .call(g => g.selectAll('.tick text').filter((d, i) => data[i].value < 0)
      .attr('text-anchor', 'start')
      .attr('x', 6));

  return svg.node();
}

chart();

```

