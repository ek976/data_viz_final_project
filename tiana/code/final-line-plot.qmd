---
title: "Line Plot"
author: "Tiana Le"
draft: true
---

```{r}
library(ggplot2)
library(dplyr)
library(tidyr)
```

```{r}
read <- read.csv('../../cleaned_data/labor_force_all.csv')
read <- select(read, -Country.Code, -Indicator.Code)
read$Indicator.Name[read$Indicator.Name == "Labor force with advanced education, female (% of female labor force)"] <- "With advanced education, female"
read$Indicator.Name[read$Indicator.Name == "Labor force with advanced education, male (% of male labor force)"] <- "With advanced education, male"
read$Indicator.Name[read$Indicator.Name == "Labor force with basic education, female (% of female labor force)"] <- "With basic education, female"
read$Indicator.Name[read$Indicator.Name == "Labor force with basic education, male (% of male labor force)"] <- "With basic education, male"
read$Indicator.Name[read$Indicator.Name == "Labor force with advanced education (% of total)"] <- "With advanced education (% total)"
read$Indicator.Name[read$Indicator.Name == "Labor force with basic education (% of total)"] <- "With basic education (% total)"
unique_values1 <- unique(read$Indicator.Name)
print(unique_values1)
```

```{r}
# Unpivot the data
read <- pivot_longer(read, cols = -c(1:2), names_to = "Year", values_to = "Value")
read <- na.omit(read)
read$Year <- gsub("X", "", read$Year)
read$Year <- as.numeric(read$Year)
```



```{r}
# Define income groups
low_income <- c(
    "Afghanistan", "Korea, Dem. People's Rep", "South Sudan", "Burkina Faso", "Liberia",
    "Sudan", "Burundi", "Madagascar", "Syrian Arab Republic", "Central African Republic",
    "Malawi", "Togo", "Chad", "Mali", "Uganda", "Congo, Dem. Rep", "Mozambique",
    "Yemen, Rep.", "Eritrea", "Niger", "Ethiopia", "Rwanda", "Gambia, The", "Sierra Leone",
    "Guinea-Bissau", "Somalia"
)

lower_middle_income <- c(
    "Angola", "Jordan", "Philippines", "Algeria", "India", "Samoa", "Bangladesh",
    "Iran, Islamic Rep", "São Tomé and Principe", "Benin", "Kenya", "Senegal", "Bhutan",
    "Kiribati", "Solomon Islands", "Bolivia", "Kyrgyz Republic", "Sri Lanka", "Cabo Verde",
    "Lao PDR", "Tanzania", "Cambodia", "Lebanon", "Tajikistan", "Cameroon", "Lesotho",
    "Timor-Leste", "Comoros", "Mauritania", "Tunisia", "Congo, Rep.", "Micronesia, Fed. Sts.",
    "Ukraine", "Côte d'Ivoire", "Mongolia", "Uzbekistan", "Djibouti", "Morocco", "Vanuatu",
    "Egypt, Arab Rep.", "Myanmar", "Vietnam", "Eswatini", "Nepal", "Zambia", "Ghana",
    "Nicaragua", "Zimbabwe", "Guinea", "Nigeria", "Haiti", "Pakistan", "Honduras",
    "Papua New Guinea"
)

upper_middle_income <- c(
    "Albania", "Fiji", "North Macedonia", "Argentina", "Gabon", "Palau", "Armenia",
    "Georgia", "Paraguay", "Azerbaijan", "Grenada", "Peru", "Belarus", "Guatemala",
    "Russian Federation", "Belize", "Indonesia", "Serbia", "Bosnia and Herzegovina",
    "Iraq", "South Africa", "Botswana", "Jamaica", "St. Lucia", "Brazil", "Kazakhstan",
    "St. Vincent and the Grenadines", "Bulgaria", "Kosovo", "Suriname", "China", "Libya",
    "Thailand", "Colombia", "Malaysia", "Tonga", "Costa Rica", "Maldives", "Türkiye",
    "Cuba", "Marshall Islands", "Turkmenistan", "Dominica", "Mauritius", "Tuvalu",
    "Dominican Republic", "Mexico", "West Bank and Gaza", "El Salvador", "Moldova",
    "Equatorial Guinea", "Montenegro", "Ecuador", "Namibia"
)

high_income <- c(
    "American Samoa", "Germany", "Oman", "Andorra", "Gibraltar", "Panama", "Antigua and Barbuda",
    "Greece", "Poland", "Aruba", "Greenland", "Portugal", "Australia", "Guam", "Puerto Rico",
    "Austria", "Hong Kong SAR, China", "Qatar", "Bahamas, The", "Hungary", "Romania", "Bahrain",
    "Iceland", "San Marino", "Barbados", "Ireland", "Saudi Arabia", "Belgium", "Isle of Man",
    "Seychelles", "Bermuda", "Israel", "Singapore", "British Virgin Islands", "Italy",
    "Sint Maarten (Dutch part)", "Brunei Darussalam", "Japan", "Slovak Republic", "Canada",
    "Korea, Rep.", "Slovenia", "Cayman Islands", "Kuwait", "Spain", "Channel Islands", "Latvia",
    "St. Kitts and Nevis", "Chile", "Liechtenstein", "St. Martin (French part)", "Croatia",
    "Lithuania", "Sweden", "Curaçao", "Luxembourg", "Switzerland", "Cyprus", "Macao SAR, China",
    "Taiwan, China", "Czech Republic", "Malta", "Trinidad and Tobago", "Denmark", "Monaco",
    "Turks and Caicos Islands", "Estonia", "Nauru", "United Arab Emirates", "Faroe Islands",
    "Netherlands", "United Kingdom", "Finland", "New Caledonia", "United States", "France",
    "New Zealand", "Uruguay", "French Polynesia", "Northern Mariana Islands", "Virgin Islands (U.S.)",
    "Guyana", "Norway"
)

# Create income_groups list
income_groups <- list(
    low_income = low_income,
    lower_middle_income = lower_middle_income,
    upper_middle_income = upper_middle_income,
    high_income = high_income
)

```

```{r}


# Function to categorize countries into income groups
categorize_income <- function(country_name) {
  if (country_name %in% income_groups$low_income) {
    return("Low-Income")
  } else if (country_name %in% income_groups$lower_middle_income) {
    return("Lower-Middle-Income")
  } else if (country_name %in% income_groups$upper_middle_income) {
    return("Upper-Middle-Income")
  } else if (country_name %in% income_groups$high_income) {
    return("High-Income")
  } else {
    return(NA) # Handle countries not found in any income group
  }
}

# Apply the function to create a new column with income groupings
read$Income_Group <- sapply(read$Country.Name, categorize_income)


read <- read[!is.na(read$Country.Name), ]

```




```{r}

my_theme <- theme_minimal() +
  theme(
    #plot.background = element_rect(fill = "#2589BD"),
    axis.title.x = element_text(family = "Helvetica", color="black"),
    axis.ticks = element_blank(),
    axis.text = element_text(family = "Helvetica", color="black", size=7),
    plot.subtitle = element_text(family = "Helvetica", face = "italic"),
    #panel.background = element_rect(fill = "#DCEFF9", color="#DCEFF9"),
    panel.grid.minor = element_blank(),
    #panel.grid.major = element_line(color = "#EEF7FC"),
    #legend.key = element_rect(fill = "#EEF7FC", color="#EEF7FC"),
    #legend.background = element_rect(fill="#EEF7FC", color="#124A68"), 
    legend.text = element_text(family = "Helvetica"),
    plot.title = element_text(family = "Helvetica", size = 16, face = "bold"),
    axis.title = element_text(family = "Helvetica", face = "bold"),
    legend.title = element_text(family = "Helvetica", face = "bold"),
    plot.caption = element_text(family = "Helvetica", face = "italic"))

```


```{r}
theme_set(my_theme)
```



```{r}


df <- read[((read$Indicator.Name == "With advanced education, female") | (read$Indicator.Name == "With advanced education, male") | (read$Indicator.Name == "With basic education, female") | (read$Indicator.Name == "With basic education, male")),]
df <- na.omit(df)

```





```{r}

# Calculate average percentage by income group
df_avg <- aggregate(Value ~ Income_Group + Year + Indicator.Name, data = df, FUN = mean, na.rm = TRUE)

# Filter for the years 2010 to 2013
df_avg <- df_avg[df_avg$Year >= 2010 & df_avg$Year <= 2013, ]


tiana_palette <- c("#3d6469", "#ffa205", "#d40637", "#00c1c1")

# Define the plot function
plot_fun <- function(df, df_label, title) {
  ggplot(df, aes(x = Year, y = Value, color = Income_Group)) +
    geom_line() +
    geom_text(data = df_label, aes(label = Income_Group),
              nudge_x = 0.5, nudge_y = 3, check_overlap = TRUE) +
    scale_color_manual(values = tiana_palette, name = "Country") +
    ylim(20, 100) + 
    labs(title = title,
         x = "Year",
         y = "Percentage") +
    theme(legend.position = "none")
}

# Create line plot with facets for each gender and education level
facet_plot <- ggplot(df_avg, aes(x = Year, y = Value, color = Income_Group)) +
  geom_line(size = 1.5) +
  scale_color_manual(values = tiana_palette, name = "Income Group") +
  ylim(20, 100) +
  labs(title = "Labour Force with Education Levels (2010-2013)",
       x = "Year",
       y = "Percentage") +
  facet_wrap(~Indicator.Name, strip.position = "top") + 
  theme(
    strip.text = element_text(face = "bold")
  )

print(facet_plot)

ggsave("line_plot.png", facet_plot, width = 10, height = 8)
```
```{r}

income_group_count <- df[c('Country.Name', 'Income_Group')]
income_group_count <- unique(income_group_count)

income_group_count <- income_group_count %>%
  group_by(Income_Group) %>%
  summarise(Count = n_distinct(Country.Name))

# Reorder factor levels for Income_Group from low to high income
income_group_count$Income_Group <- factor(income_group_count$Income_Group, levels = c("Low-Income", "Lower-Middle-Income", "Upper-Middle-Income", "High-Income"))

# Bar Plot to show Count of Country for each Income Group
labor <- ggplot(income_group_count, aes(x = Income_Group, y = Count, fill = Income_Group)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = tiana_palette, name = "Income Group") +
  labs(title = "Countries with Labor Force Statistics Collected (2014)",
       x = "Income Group",
       y = "Number of Countries")

ggsave("labor_barplot.png", labor, width = 7, height = 4)

```

