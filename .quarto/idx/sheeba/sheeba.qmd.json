{"title":"Plot 5: Government GDP","markdown":{"yaml":{"title":"Plot 5: Government GDP","author":"Sheeba","format":{"html":{"embed-resources":true,"code-fold":true,"include-in-header":[{"text":"<script src=\"https://d3js.org/d3.v7.min.js\"></script>\n"}]}}},"containsRefs":false,"markdown":"\n\n```{ojs}\nd7 = require('d3@7') \nprimaryData = d7.csv('primary_1.csv', function(d){\n  return {\n    country_name: d.country_name,\n    year1: +d.year1,\n    year2: +d.year2,\n  }\n})\nprimaryData\n\n```\n\n```{ojs}\n\nsecondaryData = d7.csv('secondary_1.csv', function(d){\n  return {\n    country_name: d.country_name,\n    year1: +d.year1,\n    year2: +d.year2,\n  }\n})\nsecondaryData\n```\n\n```{ojs}\n\ntertiaryData = d7.csv('tertiary_1.csv', function(d){\n  return {\n    country_name: d.country_name,\n    year1: +d.year1,\n    year2: +d.year2,\n  }\n})\ntertiaryData\n```\n\n```{ojs}\n\nviewof metric = Inputs.radio(new Map([[\"Absolute\", \"absolute\"], [\"Relative\", \"relative\"]]), {value: \"absolute\", label: \"Change\"})\n\n\n```\n\n```{ojs}\n\n\nviewof selectedDataset = Inputs.select(['Primary', 'Secondary', 'Tertiary'], {label: 'Select Dataset', value: 'Primary'})\n```\n\n```{ojs}\n\n\n\nchart = async () => {\n  const selected = await selectedDataset;\n  let data;\n  if (selected === 'Primary') {\n    data = await primaryData;\n  } else if (selected === 'Secondary') {\n    data = await secondaryData;\n  } else if (selected === 'Tertiary') {\n    data = await tertiaryData;\n  }\n  \n  data = data.map(d => ({\n    country_name: d.country_name,\n    value: metric === 'absolute' ? d.year2 - d.year1 : (d.year2 - d.year1) / d.year1\n  }));\n\n  const barHeight = 25;\n  const marginTop = 50; // Increased to accommodate the title\n  const marginRight = 70;\n  const marginBottom = 50; // Increased to accommodate the x-axis label\n  const marginLeft = 120;\n  const height = Math.ceil((data.length + 0.1) * barHeight) + marginTop + marginBottom;\n\n  const x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.value))\n    .rangeRound([marginLeft, width - marginRight]);\n\n  const y = d3.scaleBand()\n    .domain(data.map(d => d.country_name))\n    .rangeRound([marginTop, height - marginBottom])\n    .padding(0.1);\n\n  const format = d3.format(metric === 'absolute' ? '+,d' : '+.1%');\n  const tickFormat = metric === 'absolute' ? d3.formatPrefix('+.1', 1e1) : d3.format('+.0%');\n\n  const svg = d3.create('svg')\n    .attr('viewBox', [0, 0, width, height])\n    .attr('style', 'max-width: 100%; height: auto; font-family: monospace; font-size: 10px;');\n\n  // Chart Title\n  svg.append('text')\n    .attr('x', width / 2)\n    .attr('y', 30)\n    .attr('text-anchor', 'middle')\n    .style('font-size', '16px')\n    .style('font-weight', 'bold')\n    .text('Government GDP Change by Country');\n\n  // X-axis Label\n  svg.append('text')\n    .attr('x', width / 2)\n    .attr('y', height - 15)\n    .attr('text-anchor', 'middle')\n    .style('font-size', '12px')\n    .text('Change in GDP');\n\n  // Y-axis Label\n  svg.append('text')\n    .attr('transform', `rotate(-90)`)\n    .attr('x', -(height / 2))\n    .attr('y', marginLeft - 40)\n    .attr('text-anchor', 'middle')\n    .style('font-size', '12px')\n    .text('Country');\n\n  // Remaining SVG drawing code unchanged, add bars, texts, and axes\n  svg.append('g')\n    .selectAll('rect')\n    .data(data)\n    .join('rect')\n    .attr('fill', d => d.value > 0 ? '#3d6469' : '#d40637')\n    .attr('x', d => x(Math.min(d.value, 0)))\n    .attr('y', d => y(d.country_name))\n    .attr('width', d => Math.abs(x(d.value) - x(0)))\n    .attr('height', y.bandwidth());\n\n  svg.append('g')\n    .attr('font-family', 'monospace')\n    .attr('font-size', 10)\n    .selectAll('text')\n    .data(data)\n    .join('text')\n    .attr('text-anchor', d => d.value < 0 ? 'end' : 'start')\n    .attr('x', d => x(d.value) + Math.sign(d.value) * 4)\n    .attr('y', d => y(d.country_name) + y.bandwidth() / 2)\n    .attr('dy', '0.35em')\n    .text(d => format(d.value));\n\n  svg.append('g')\n    .attr('transform', `translate(0,${marginTop})`)\n    .call(d3.axisTop(x).ticks(width / 80).tickFormat(tickFormat))\n    .call(g => g.selectAll('.tick line').clone()\n      .attr('y2', height - marginTop - marginBottom)\n      .attr('stroke-opacity', 0.1))\n    .call(g => g.select('.domain').remove());\n\n  svg.append('g')\n    .attr('transform', `translate(${x(0)},0)`)\n    .call(d3.axisLeft(y).tickSize(0).tickPadding(6))\n    .call(g => g.selectAll('.tick text').filter((d, i) => data[i].value < 0)\n      .attr('text-anchor', 'start')\n      .attr('x', 6));\n\n  return svg.node();\n}\n\nchart();\n```\n\n```{ojs}\n\nPlot.plot({\n  height: 800,\n  x: {axis: \"top\"},\n  y: {axis: null},\n  marginLeft: 40,\n  color: {scheme: \"PiYG\"},\n  marks: [\n    Plot.barX(primaryData, {\n      y: \"State\",\n      x: (d) => d[2019] - d[2010],\n      fill: (d) => d[2019] > d[2010],\n      sort: { y: \"x\" }\n    }),\n    d3\n      .groups(primaryData, (d) => d[2019] > d[2010])\n      .map(([growth, states]) =>\n        Plot.text(states, {\n          x: 0,\n          text: \"State\",\n          y: \"State\",\n          textAnchor: growth ? \"end\" : \"start\",\n          dx: growth ? -4 : 4\n        })\n      )\n  ]\n})\n\n```\n\n","srcMarkdownNoYaml":"\n\n```{ojs}\nd7 = require('d3@7') \nprimaryData = d7.csv('primary_1.csv', function(d){\n  return {\n    country_name: d.country_name,\n    year1: +d.year1,\n    year2: +d.year2,\n  }\n})\nprimaryData\n\n```\n\n```{ojs}\n\nsecondaryData = d7.csv('secondary_1.csv', function(d){\n  return {\n    country_name: d.country_name,\n    year1: +d.year1,\n    year2: +d.year2,\n  }\n})\nsecondaryData\n```\n\n```{ojs}\n\ntertiaryData = d7.csv('tertiary_1.csv', function(d){\n  return {\n    country_name: d.country_name,\n    year1: +d.year1,\n    year2: +d.year2,\n  }\n})\ntertiaryData\n```\n\n```{ojs}\n\nviewof metric = Inputs.radio(new Map([[\"Absolute\", \"absolute\"], [\"Relative\", \"relative\"]]), {value: \"absolute\", label: \"Change\"})\n\n\n```\n\n```{ojs}\n\n\nviewof selectedDataset = Inputs.select(['Primary', 'Secondary', 'Tertiary'], {label: 'Select Dataset', value: 'Primary'})\n```\n\n```{ojs}\n\n\n\nchart = async () => {\n  const selected = await selectedDataset;\n  let data;\n  if (selected === 'Primary') {\n    data = await primaryData;\n  } else if (selected === 'Secondary') {\n    data = await secondaryData;\n  } else if (selected === 'Tertiary') {\n    data = await tertiaryData;\n  }\n  \n  data = data.map(d => ({\n    country_name: d.country_name,\n    value: metric === 'absolute' ? d.year2 - d.year1 : (d.year2 - d.year1) / d.year1\n  }));\n\n  const barHeight = 25;\n  const marginTop = 50; // Increased to accommodate the title\n  const marginRight = 70;\n  const marginBottom = 50; // Increased to accommodate the x-axis label\n  const marginLeft = 120;\n  const height = Math.ceil((data.length + 0.1) * barHeight) + marginTop + marginBottom;\n\n  const x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.value))\n    .rangeRound([marginLeft, width - marginRight]);\n\n  const y = d3.scaleBand()\n    .domain(data.map(d => d.country_name))\n    .rangeRound([marginTop, height - marginBottom])\n    .padding(0.1);\n\n  const format = d3.format(metric === 'absolute' ? '+,d' : '+.1%');\n  const tickFormat = metric === 'absolute' ? d3.formatPrefix('+.1', 1e1) : d3.format('+.0%');\n\n  const svg = d3.create('svg')\n    .attr('viewBox', [0, 0, width, height])\n    .attr('style', 'max-width: 100%; height: auto; font-family: monospace; font-size: 10px;');\n\n  // Chart Title\n  svg.append('text')\n    .attr('x', width / 2)\n    .attr('y', 30)\n    .attr('text-anchor', 'middle')\n    .style('font-size', '16px')\n    .style('font-weight', 'bold')\n    .text('Government GDP Change by Country');\n\n  // X-axis Label\n  svg.append('text')\n    .attr('x', width / 2)\n    .attr('y', height - 15)\n    .attr('text-anchor', 'middle')\n    .style('font-size', '12px')\n    .text('Change in GDP');\n\n  // Y-axis Label\n  svg.append('text')\n    .attr('transform', `rotate(-90)`)\n    .attr('x', -(height / 2))\n    .attr('y', marginLeft - 40)\n    .attr('text-anchor', 'middle')\n    .style('font-size', '12px')\n    .text('Country');\n\n  // Remaining SVG drawing code unchanged, add bars, texts, and axes\n  svg.append('g')\n    .selectAll('rect')\n    .data(data)\n    .join('rect')\n    .attr('fill', d => d.value > 0 ? '#3d6469' : '#d40637')\n    .attr('x', d => x(Math.min(d.value, 0)))\n    .attr('y', d => y(d.country_name))\n    .attr('width', d => Math.abs(x(d.value) - x(0)))\n    .attr('height', y.bandwidth());\n\n  svg.append('g')\n    .attr('font-family', 'monospace')\n    .attr('font-size', 10)\n    .selectAll('text')\n    .data(data)\n    .join('text')\n    .attr('text-anchor', d => d.value < 0 ? 'end' : 'start')\n    .attr('x', d => x(d.value) + Math.sign(d.value) * 4)\n    .attr('y', d => y(d.country_name) + y.bandwidth() / 2)\n    .attr('dy', '0.35em')\n    .text(d => format(d.value));\n\n  svg.append('g')\n    .attr('transform', `translate(0,${marginTop})`)\n    .call(d3.axisTop(x).ticks(width / 80).tickFormat(tickFormat))\n    .call(g => g.selectAll('.tick line').clone()\n      .attr('y2', height - marginTop - marginBottom)\n      .attr('stroke-opacity', 0.1))\n    .call(g => g.select('.domain').remove());\n\n  svg.append('g')\n    .attr('transform', `translate(${x(0)},0)`)\n    .call(d3.axisLeft(y).tickSize(0).tickPadding(6))\n    .call(g => g.selectAll('.tick text').filter((d, i) => data[i].value < 0)\n      .attr('text-anchor', 'start')\n      .attr('x', 6));\n\n  return svg.node();\n}\n\nchart();\n```\n\n```{ojs}\n\nPlot.plot({\n  height: 800,\n  x: {axis: \"top\"},\n  y: {axis: null},\n  marginLeft: 40,\n  color: {scheme: \"PiYG\"},\n  marks: [\n    Plot.barX(primaryData, {\n      y: \"State\",\n      x: (d) => d[2019] - d[2010],\n      fill: (d) => d[2019] > d[2010],\n      sort: { y: \"x\" }\n    }),\n    d3\n      .groups(primaryData, (d) => d[2019] > d[2010])\n      .map(([growth, states]) =>\n        Plot.text(states, {\n          x: 0,\n          text: \"State\",\n          y: \"State\",\n          textAnchor: growth ? \"end\" : \"start\",\n          dx: growth ? -4 : 4\n        })\n      )\n  ]\n})\n\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"embed-resources":true,"include-in-header":[{"text":"<script src=\"https://d3js.org/d3.v7.min.js\"></script>\n"}],"output-file":"sheeba.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"lux","title":"Plot 5: Government GDP","author":"Sheeba"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}